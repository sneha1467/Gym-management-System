[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "BMI",
  "enabled": 1,
  "modified": "2025-07-08 19:10:19.185726",
  "module": "Gym Management System",
  "name": "BMI calculation",
  "script": "frappe.ui.form.on('BMI', {\n    refresh(frm) {\n        setTimeout(() => {\n            const grid = frm.fields_dict['fitness_track']?.grid;\n\n            if (!grid) {\n                console.error(\"❌ Child table grid not found\");\n                return;\n            }\n\n            console.log(\"✅ Grid found, attaching input listeners\");\n\n            grid.wrapper.on(\n                'input',\n                'input[data-fieldname=\"height\"], input[data-fieldname=\"weight\"]',\n                function () {\n                    const $row = $(this).closest('.grid-row');\n                    const row_name = $row.attr(\"data-name\");\n\n                    if (!row_name) {\n                        console.warn(\"⚠️ Could not get row name\");\n                        return;\n                    }\n\n                    const heightInput = $row.find('input[data-fieldname=\"height\"]').val();\n                    const weightInput = $row.find('input[data-fieldname=\"weight\"]').val();\n                    const bmiInput = $row.find('input[data-fieldname=\"bmi\"]');\n\n                    const height = parseFloat(heightInput);\n                    const weight = parseFloat(weightInput);\n\n                    if (!height || !weight || height <= 0) {\n                        console.log(`⚠️ Invalid input(s) → height: ${heightInput}, weight: ${weightInput}`);\n                        if (bmiInput) bmiInput.val('');\n                        return;\n                    }\n\n                    const bmi = (weight * 10000) / (height * height);\n                    const bmiVal = bmi.toFixed(2);\n\n                    if (bmiInput) {\n                        bmiInput.val(bmiVal);\n                        bmiInput.trigger('change');\n                    }\n\n                    // Update the in-memory doc without triggering a full refresh\n                    const child_rows = frm.doc.fitness_track || [];\n                    const row = child_rows.find(r => r.name === row_name);\n                    if (row) {\n                        row.bmi = bmiVal;\n                        // Do NOT refresh the whole child table here\n                        console.log(`✅ BMI calculated: ${bmiVal}`);\n                    }\n                }\n            );\n        }, 500);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gym Membership",
  "enabled": 1,
  "modified": "2025-07-09 19:25:19.276058",
  "module": "Gym Management System",
  "name": "Ending Date Calculation",
  "script": "frappe.ui.form.on('Gym Membership', {\n    plans: function(frm) {\n        auto_calculate_ending_date(frm);\n    },\n    joining_date: function(frm) {\n        auto_calculate_ending_date(frm);\n    }\n});\n\nconst PLAN_DURATION_DAYS = {\n    \"Monthly (₹3000)\": 30,\n    \"Quarterly (₹6000)\": 90,\n    \"Yearly (₹15000)\": 365\n};\n\nfunction auto_calculate_ending_date(frm) {\n    const joining_date = frm.doc.joining_date;\n    const selected_plan = frm.doc.plans;\n\n    if (!joining_date || !selected_plan) {\n        frm.set_value('ending_date', null);\n        return;\n    }\n\n    const duration_days = PLAN_DURATION_DAYS[selected_plan];\n\n    if (!duration_days) {\n        frappe.msgprint(__('Invalid plan selected: ') + selected_plan);\n        frm.set_value('ending_date', null);\n        return;\n    }\n\n    const start_date = frappe.datetime.str_to_obj(joining_date);\n    const end_date = frappe.datetime.add_days(start_date, duration_days);\n    const end_date_str = frappe.datetime.obj_to_str(end_date);\n\n    frm.set_value('ending_date', end_date_str);\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gym Membership",
  "enabled": 1,
  "modified": "2025-07-09 19:23:15.680163",
  "module": null,
  "name": "Locker Count",
  "script": "frappe.ui.form.on('Gym Membership', {\n    assign_locker: function(frm) {\n        if (frm.doc.assign_locker === \"Yes\") {\n            frm.set_df_property('locker_available', 'hidden', 0);\n        } else {\n            frm.set_df_property('locker_available', 'hidden', 1);\n            frm.set_value('locker_available', null);\n        }\n    },\n    refresh: function(frm) {\n        if (frm.doc.assign_locker === \"Yes\") {\n            frm.set_df_property('locker_available', 'hidden', 0);\n        } else {\n            frm.set_df_property('locker_available', 'hidden', 1);\n            frm.set_value('locker_available', null);\n        }\n    },\n    locker_available: function(frm) {\n        \n    }\n});\n\nfrappe.ui.form.on('Gym Membership', {\n    onload: function(frm) {\n        frm.set_query(\"locker_available\", function() {\n            return {\n                filters: [\n                    [\"name\", \"not in\", frm.doc.assigned_lockers || []]\n                ]\n            };\n        });\n\n    \n        frappe.call({\n            method: \"frappe.client.get_list\",\n            args: {\n                doctype: \"Gym Membership\",\n                filters: { \"assign_locker\": \"Yes\" },\n                fields: [\"locker_available\"]\n            },\n            callback: function(r) {\n                if(r.message) {\n                    let lockers = r.message.map(l => l.locker_available).filter(l => l);\n                    frm.doc.assigned_lockers = lockers;\n                }\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gym Membership",
  "enabled": 1,
  "modified": "2025-07-10 10:00:35.419070",
  "module": "Gym Management System",
  "name": "Final Price Calculation",
  "script": "frappe.ui.form.on('Gym Membership', {\n    plans: function (frm) {\n        update_final_price(frm);\n    },\n    assign_locker: function (frm) {\n        update_final_price(frm);\n    },\n    refresh: function(frm) {\n        update_final_price(frm);\n    }\n});\n\nfunction update_final_price(frm) {\n    const plan = (frm.doc.plans || \"\").toLowerCase();\n    const assign_locker = frm.doc.assign_locker;\n\n    if (!plan) return;\n\n    frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: \"Gym Settings\",\n            name: \"gym-setting\"\n        },\n        callback: function (r) {\n            if (!r.message) {\n                frappe.msgprint(\"Gym Settings not found.\");\n                return;\n            }\n\n            const settings = r.message;\n            let total_price = 0;\n\n            if (plan.includes(\"monthly\")) {\n                total_price += parseFloat(settings.monthly_plan_price || 0);\n            } else if (plan.includes(\"quarterly\")) {\n                total_price += parseFloat(settings.quarterly_plan_price || 0);\n            } else if (plan.includes(\"yearly\")) {\n                total_price += parseFloat(settings.yearly_plan_price || 0);\n            }\n\n            if (assign_locker === \"Yes\") {\n                total_price += parseFloat(settings.locker_deposit_amount || 0);\n            }\n\n            frm.set_value(\"final_price\", total_price);\n        }\n    });\n}\n",
  "view": "Form"
 }
]