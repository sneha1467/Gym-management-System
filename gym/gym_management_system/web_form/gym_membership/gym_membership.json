{
 "allow_comments": 0,
 "allow_delete": 0,
 "allow_edit": 0,
 "allow_incomplete": 0,
 "allow_multiple": 0,
 "allow_print": 0,
 "anonymous": 0,
 "apply_document_permissions": 0,
 "banner_image": "/files/Admin.jpg",
 "button_label": "Save",
 "client_script": "frappe.web_form.after_load = () => {\n  console.log(\"Webform Loaded\");\n\n\n  setTimeout(() => {\n    const grid = frappe.web_form.fields_dict.fitness_track?.grid;\n\n    if (!grid) {\n      console.error(\"Child table grid not found\");\n      return;\n    }\n\n    try {\n      grid.wrapper.on(\n        'blur',\n        'input[data-fieldname=\"height\"], input[data-fieldname=\"weight\"], input[data-fieldname=\"calories\"]',\n        function () {\n          const $row = $(this).closest('.grid-row');\n          const row_name = $row.attr(\"data-name\");\n          if (!row_name) return;\n\n          const rows = frappe.web_form.get_value(\"fitness_track\") || [];\n          const row = rows.find(r => r.name === row_name);\n          if (!row) return;\n\n          let height = parseFloat(row.height);\n          let weight = parseFloat(row.weight);\n          if (!height || !weight || height === 0) return;\n\n          height = height / 100; // convert cm to meters\n          let bmi = weight / (height * height);\n          row.bmi = bmi.toFixed(2);\n\n          frappe.web_form.set_value(\"fitness_track\", rows).then(() => {\n            console.log(\"\ud83d\udcca BMI updated:\", row.bmi);\n          });\n        }\n      );\n      console.log(\"BMI listeners attached\");\n    } catch (error) {\n      console.error(\"Error attaching BMI listeners:\", error);\n    }\n  }, 500);\n\n\n  frappe.web_form.on('joining_date', update_ending_date);\n  frappe.web_form.on('plans', update_ending_date);\n\n  function update_ending_date() {\n    let joining_date = frappe.web_form.get_value('joining_date');\n    let plan = frappe.web_form.get_value('plans');\n\n    if (!joining_date || !plan) return;\n\n    let months = 0;\n    plan = plan.toLowerCase();\n\n    if (plan.includes(\"monthly\")) months = 1;\n    else if (plan.includes(\"quarterly\")) months = 3;\n    else if (plan.includes(\"yearly\")) months = 12;\n\n    if (months > 0) {\n      const end_date = frappe.datetime.add_months(joining_date, months);\n      frappe.web_form.set_value('ending_date', frappe.datetime.obj_to_str(end_date));\n    }\n  }\n\n  frappe.web_form.on('plans', update_final_price);\n  frappe.web_form.on('assign_locker', update_final_price);\n\n  function update_final_price() {\n    const plan = (frappe.web_form.get_value('plans') || \"\").toLowerCase();\n    const assign_locker = frappe.web_form.get_value('assign_locker');\n\n    if (!plan) return;\n\n    frappe.call({\n      method: \"frappe.client.get\",\n      args: {\n        doctype: \"Gym Settings\",\n        name: \"gym-setting\"\n      },\n      callback: function (r) {\n        if (!r.message) {\n          console.error(\"Gym Settings not found\");\n          return;\n        }\n\n        const settings = r.message;\n        let total_price = 0;\n\n        if (plan.includes(\"monthly\")) {\n          total_price += parseFloat(settings.monthly_plan_price || 0);\n        } else if (plan.includes(\"quarterly\")) {\n          total_price += parseFloat(settings.quarterly_plan_price || 0);\n        } else if (plan.includes(\"yearly\")) {\n          total_price += parseFloat(settings.yearly_plan_price || 0);\n        }\n\n        if (assign_locker === \"Yes\") {\n          total_price += parseFloat(settings.locker_deposit_amount || 0);\n        }\n\n        frappe.web_form.set_value(\"final_price\", total_price);\n        console.log(`Final Price Updated: \u20b9${total_price}`);\n      }\n    });\n  }\n\n \n  frappe.web_form.set_query('locker', () => {\n    return {\n      filters: {\n        member: \"\"\n      }\n    };\n  });\n\n  frappe.web_form.on('assign_locker', () => {\n    const assign_locker = frappe.web_form.get_value('assign_locker');\n\n    if (assign_locker === \"Yes\") {\n      frappe.call({\n        method: \"frappe.client.get_list\",\n        args: {\n          doctype: \"Locker\",\n          filters: { member: \"\" },\n          limit_page_length: 1\n        },\n        callback: (r) => {\n          if (r.message && r.message.length) {\n            frappe.web_form.set_value('locker', r.message[0].name);\n          } else {\n            frappe.msgprint(\"No lockers available\");\n            frappe.web_form.set_value('assign_locker', \"No\");\n          }\n        }\n      });\n    } else {\n      frappe.web_form.set_value('locker', '');\n    }\n  });\n};\n\n\nfrappe.web_form.on('specialization', () => {\n  const specialization = frappe.web_form.get_value(\"specialization\");\n  if (!specialization) return;\n\n  frappe.call({\n    method: \"gym.gym_management_system.api.get_filtered_trainers\",\n    args: {\n      doctype: \"TrainerReg\",\n      txt: \"\",\n      searchfield: \"name1\",\n      start: 0,\n      page_len: 20,\n      filters: JSON.stringify({ specialization })\n    },\n    callback: function (r) {\n      const trainerSelect = document.querySelector('select[data-fieldname=\"trainer\"]');\n      if (!trainerSelect) {\n        console.warn(\"Trainer field not found\");\n        return;\n      }\n\n      trainerSelect.innerHTML = \"\";\n\n      if (r.message && r.message.length > 0) {\n        const defaultOption = document.createElement(\"option\");\n        defaultOption.value = \"\";\n        defaultOption.textContent = \"Select Trainer\";\n        trainerSelect.appendChild(defaultOption);\n\n        r.message.forEach(opt => {\n          const optionElem = document.createElement(\"option\");\n          optionElem.value = opt.value;\n          optionElem.textContent = opt.label;\n          trainerSelect.appendChild(optionElem);\n        });\n      } else {\n        const optionElem = document.createElement(\"option\");\n        optionElem.value = \"\";\n        optionElem.textContent = \"No trainers available\";\n        trainerSelect.appendChild(optionElem);\n      }\n\n      trainerSelect.dispatchEvent(new Event('change'));\n    },\n    error: function (err) {\n      console.error(\"Error loading trainers:\", err);\n    }\n  });\n});\n",
 "condition_json": "[]",
 "creation": "2025-07-01 15:05:46.290823",
 "custom_css": "",
 "doc_type": "Gym Membership",
 "docstatus": 0,
 "doctype": "Web Form",
 "idx": 0,
 "is_standard": 1,
 "list_columns": [],
 "login_required": 0,
 "max_attachment_size": 0,
 "meta_description": "",
 "modified": "2025-07-07 10:03:13.800528",
 "modified_by": "Administrator",
 "module": "Gym Management System",
 "name": "gym-membership",
 "owner": "Administrator",
 "published": 1,
 "route": "gym-membership",
 "show_attachments": 0,
 "show_list": 0,
 "show_sidebar": 0,
 "title": "Gym Membership",
 "web_form_fields": [
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "name1",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Name",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "email_id",
   "fieldtype": "Data",
   "hidden": 0,
   "label": "Email ID",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "contact",
   "fieldtype": "Phone",
   "hidden": 0,
   "label": "Contact",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "gender",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Gender",
   "max_length": 0,
   "max_value": 0,
   "options": "Male\nFemale",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "plans",
   "fieldtype": "Select",
   "hidden": 0,
   "label": " Membership Plans",
   "max_length": 0,
   "max_value": 0,
   "options": "Monthly (\u20b93000)\nQuarterly (\u20b96000)\nYearly (\u20b915000)",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "joining_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Joining Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "ending_date",
   "fieldtype": "Date",
   "hidden": 0,
   "label": "Ending Date",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "assign_locker",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Assign Locker",
   "max_length": 0,
   "max_value": 0,
   "options": "Yes\nNo",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "locker",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Locker ",
   "max_length": 0,
   "max_value": 0,
   "options": "Locker",
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "address",
   "fieldtype": "Small Text",
   "hidden": 0,
   "label": "Address",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "fitness_track",
   "fieldtype": "Table",
   "hidden": 0,
   "label": "Fitness Track",
   "max_length": 0,
   "max_value": 0,
   "options": "Metric Update",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "specialization",
   "fieldtype": "Link",
   "hidden": 0,
   "label": "Specialization",
   "max_length": 0,
   "max_value": 0,
   "options": "Category",
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "trainer",
   "fieldtype": "Select",
   "hidden": 0,
   "label": "Trainer",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 1,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "trainer_rating",
   "fieldtype": "Rating",
   "hidden": 0,
   "label": "Trainer Rating",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 0,
   "reqd": 0,
   "show_in_filter": 0
  },
  {
   "allow_read_on_all_link_options": 0,
   "fieldname": "final_price",
   "fieldtype": "Currency",
   "hidden": 0,
   "label": "Final Price",
   "max_length": 0,
   "max_value": 0,
   "precision": "",
   "read_only": 1,
   "reqd": 0,
   "show_in_filter": 0
  }
 ]
}